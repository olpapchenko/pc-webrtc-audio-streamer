package rtc

import (
	"context"
	"fmt"
	"time"

	"com.papchenko.audio.server/audio"
	"com.papchenko.audio.server/utils"
	"github.com/pion/webrtc/v3"
	"github.com/pion/webrtc/v3/pkg/media"
)

//StartWebRtc - initializes webRTC engine, ready to get opus samples
func StartWebRtc(sampleData <-chan audio.SampleData) {

	// Create a new RTCPeerConnection
	m := webrtc.MediaEngine{}

	if err := m.RegisterCodec(webrtc.RTPCodecParameters{
		RTPCodecCapability: webrtc.RTPCodecCapability{MimeType: "audio/opus", ClockRate: 48000, Channels: 1, SDPFmtpLine: "stereo=1", RTCPFeedback: nil},
		PayloadType:        111,
	}, webrtc.RTPCodecTypeAudio); err != nil {
		panic(err)
	}

	api := webrtc.NewAPI(webrtc.WithMediaEngine(&m))

	peerConnection, err := api.NewPeerConnection(webrtc.Configuration{
		ICEServers: []webrtc.ICEServer{
			{
				URLs: []string{},
			},
		},
	})

	if err != nil {
		panic(err)
	}
	iceConnectedCtx, iceConnectedCtxCancel := context.WithCancel(context.Background())

	// Create a audio track
	audioTrack, audioTrackErr := webrtc.NewTrackLocalStaticSample(webrtc.RTPCodecCapability{MimeType: "audio/opus"}, "audio", "pion")
	if audioTrackErr != nil {
		panic(audioTrackErr)
	}
	if _, audioTrackErr = peerConnection.AddTrack(audioTrack); audioTrackErr != nil {
		panic(audioTrackErr)
	}

	go func() {

		// Wait for connection established
		<-iceConnectedCtx.Done()

		for {

			data := <-sampleData
			var sampleDuration time.Duration = 10000000

			if oggErr := audioTrack.WriteSample(media.Sample{Data: data.Samples, Duration: sampleDuration}); oggErr != nil {
				panic(oggErr)
			}

			time.Sleep(sampleDuration)
		}
	}()

	// Set the handler for ICE connection state
	// This will notify you when the peer has connected/disconnected
	peerConnection.OnICEConnectionStateChange(func(connectionState webrtc.ICEConnectionState) {
		fmt.Printf("Connection State has changed %s \n", connectionState.String())
		if connectionState == webrtc.ICEConnectionStateConnected {
			iceConnectedCtxCancel()
		}
	})

	// Wait for the offer to be pasted
	offer := webrtc.SessionDescription{}
	utils.Decode("eyJ0eXBlIjoib2ZmZXIiLCJzZHAiOiJ2PTBcclxubz0tIDY2NjExMjU3NDQ2Njk5Mjc2NjMgMiBJTiBJUDQgMTI3LjAuMC4xXHJcbnM9LVxyXG50PTAgMFxyXG5hPWdyb3VwOkJVTkRMRSAwIDFcclxuYT1tc2lkLXNlbWFudGljOiBXTVNcclxubT12aWRlbyA0NTY2MiBVRFAvVExTL1JUUC9TQVZQRiA5NiA5NyA5OCA5OSAxMDAgMTAxIDEwMlxyXG5jPUlOIElQNCAxOTIuMTY4LjEuNVxyXG5hPXJ0Y3A6OSBJTiBJUDQgMC4wLjAuMFxyXG5hPWNhbmRpZGF0ZToyMTExNTY4MjEgMSB1ZHAgMjExMzkzNzE1MSAxOTIuMTY4LjEuNSA0NTY2MiB0eXAgaG9zdCBnZW5lcmF0aW9uIDAgbmV0d29yay1jb3N0IDk5OVxyXG5hPWljZS11ZnJhZzppbVVFXHJcbmE9aWNlLXB3ZDpPMUxGdVFzcFF2RlNWWjc5V21sbS9rNEtcclxuYT1pY2Utb3B0aW9uczp0cmlja2xlXHJcbmE9ZmluZ2VycHJpbnQ6c2hhLTI1NiAwNDpFNjoyMTo5Njo5NzoyNjo1MTpDMTo5QTpFQjo2Qjo1NzpGMzo1MjpCNjozNjpFMjoyRTozMDo2OTpBQjpCNDowMzo1Qzo2OTpBQjpCRTpDRTpDRTpFQzpCNTpDMVxyXG5hPXNldHVwOmFjdHBhc3NcclxuYT1taWQ6MFxyXG5hPWV4dG1hcDoxIHVybjppZXRmOnBhcmFtczpydHAtaGRyZXh0OnRvZmZzZXRcclxuYT1leHRtYXA6MiBodHRwOi8vd3d3LndlYnJ0Yy5vcmcvZXhwZXJpbWVudHMvcnRwLWhkcmV4dC9hYnMtc2VuZC10aW1lXHJcbmE9ZXh0bWFwOjMgdXJuOjNncHA6dmlkZW8tb3JpZW50YXRpb25cclxuYT1leHRtYXA6NCBodHRwOi8vd3d3LmlldGYub3JnL2lkL2RyYWZ0LWhvbG1lci1ybWNhdC10cmFuc3BvcnQtd2lkZS1jYy1leHRlbnNpb25zLTAxXHJcbmE9ZXh0bWFwOjUgaHR0cDovL3d3dy53ZWJydGMub3JnL2V4cGVyaW1lbnRzL3J0cC1oZHJleHQvcGxheW91dC1kZWxheVxyXG5hPWV4dG1hcDo2IGh0dHA6Ly93d3cud2VicnRjLm9yZy9leHBlcmltZW50cy9ydHAtaGRyZXh0L3ZpZGVvLWNvbnRlbnQtdHlwZVxyXG5hPWV4dG1hcDo3IGh0dHA6Ly93d3cud2VicnRjLm9yZy9leHBlcmltZW50cy9ydHAtaGRyZXh0L3ZpZGVvLXRpbWluZ1xyXG5hPWV4dG1hcDo4IGh0dHA6Ly93d3cud2VicnRjLm9yZy9leHBlcmltZW50cy9ydHAtaGRyZXh0L2NvbG9yLXNwYWNlXHJcbmE9ZXh0bWFwOjkgdXJuOmlldGY6cGFyYW1zOnJ0cC1oZHJleHQ6c2RlczptaWRcclxuYT1leHRtYXA6MTAgdXJuOmlldGY6cGFyYW1zOnJ0cC1oZHJleHQ6c2RlczpydHAtc3RyZWFtLWlkXHJcbmE9ZXh0bWFwOjExIHVybjppZXRmOnBhcmFtczpydHAtaGRyZXh0OnNkZXM6cmVwYWlyZWQtcnRwLXN0cmVhbS1pZFxyXG5hPXNlbmRyZWN2XHJcbmE9bXNpZDotIDdiNDQ1MjQzLTVkNjktNDM5OS05MmNkLWJkZGI1ODAyNjZhZVxyXG5hPXJ0Y3AtbXV4XHJcbmE9cnRjcC1yc2l6ZVxyXG5hPXJ0cG1hcDo5NiBWUDgvOTAwMDBcclxuYT1ydGNwLWZiOjk2IGdvb2ctcmVtYlxyXG5hPXJ0Y3AtZmI6OTYgdHJhbnNwb3J0LWNjXHJcbmE9cnRjcC1mYjo5NiBjY20gZmlyXHJcbmE9cnRjcC1mYjo5NiBuYWNrXHJcbmE9cnRjcC1mYjo5NiBuYWNrIHBsaVxyXG5hPXJ0cG1hcDo5NyBydHgvOTAwMDBcclxuYT1mbXRwOjk3IGFwdD05NlxyXG5hPXJ0cG1hcDo5OCBWUDkvOTAwMDBcclxuYT1ydGNwLWZiOjk4IGdvb2ctcmVtYlxyXG5hPXJ0Y3AtZmI6OTggdHJhbnNwb3J0LWNjXHJcbmE9cnRjcC1mYjo5OCBjY20gZmlyXHJcbmE9cnRjcC1mYjo5OCBuYWNrXHJcbmE9cnRjcC1mYjo5OCBuYWNrIHBsaVxyXG5hPWZtdHA6OTggcHJvZmlsZS1pZD0wXHJcbmE9cnRwbWFwOjk5IHJ0eC85MDAwMFxyXG5hPWZtdHA6OTkgYXB0PTk4XHJcbmE9cnRwbWFwOjEwMCByZWQvOTAwMDBcclxuYT1ydHBtYXA6MTAxIHJ0eC85MDAwMFxyXG5hPWZtdHA6MTAxIGFwdD0xMDBcclxuYT1ydHBtYXA6MTAyIHVscGZlYy85MDAwMFxyXG5hPXNzcmMtZ3JvdXA6RklEIDIwMzAzMTg1NDQgMzQ4NjU2NDU4NVxyXG5hPXNzcmM6MjAzMDMxODU0NCBjbmFtZTpYRERiYzd3SGtraGJLbEVwXHJcbmE9c3NyYzoyMDMwMzE4NTQ0IG1zaWQ6LSA3YjQ0NTI0My01ZDY5LTQzOTktOTJjZC1iZGRiNTgwMjY2YWVcclxuYT1zc3JjOjIwMzAzMTg1NDQgbXNsYWJlbDotXHJcbmE9c3NyYzoyMDMwMzE4NTQ0IGxhYmVsOjdiNDQ1MjQzLTVkNjktNDM5OS05MmNkLWJkZGI1ODAyNjZhZVxyXG5hPXNzcmM6MzQ4NjU2NDU4NSBjbmFtZTpYRERiYzd3SGtraGJLbEVwXHJcbmE9c3NyYzozNDg2NTY0NTg1IG1zaWQ6LSA3YjQ0NTI0My01ZDY5LTQzOTktOTJjZC1iZGRiNTgwMjY2YWVcclxuYT1zc3JjOjM0ODY1NjQ1ODUgbXNsYWJlbDotXHJcbmE9c3NyYzozNDg2NTY0NTg1IGxhYmVsOjdiNDQ1MjQzLTVkNjktNDM5OS05MmNkLWJkZGI1ODAyNjZhZVxyXG5tPWF1ZGlvIDQwMjYyIFVEUC9UTFMvUlRQL1NBVlBGIDExMSAxMDMgOSAwIDggMTA1IDEzIDExMCAxMTMgMTI2XHJcbmM9SU4gSVA0IDE5Mi4xNjguMS41XHJcbmE9cnRjcDo5IElOIElQNCAwLjAuMC4wXHJcbmE9Y2FuZGlkYXRlOjIxMTE1NjgyMSAxIHVkcCAyMTEzOTM3MTUxIDE5Mi4xNjguMS41IDQwMjYyIHR5cCBob3N0IGdlbmVyYXRpb24gMCBuZXR3b3JrLWNvc3QgOTk5XHJcbmE9aWNlLXVmcmFnOmltVUVcclxuYT1pY2UtcHdkOk8xTEZ1UXNwUXZGU1ZaNzlXbWxtL2s0S1xyXG5hPWljZS1vcHRpb25zOnRyaWNrbGVcclxuYT1maW5nZXJwcmludDpzaGEtMjU2IDA0OkU2OjIxOjk2Ojk3OjI2OjUxOkMxOjlBOkVCOjZCOjU3OkYzOjUyOkI2OjM2OkUyOjJFOjMwOjY5OkFCOkI0OjAzOjVDOjY5OkFCOkJFOkNFOkNFOkVDOkI1OkMxXHJcbmE9c2V0dXA6YWN0cGFzc1xyXG5hPW1pZDoxXHJcbmE9ZXh0bWFwOjE0IHVybjppZXRmOnBhcmFtczpydHAtaGRyZXh0OnNzcmMtYXVkaW8tbGV2ZWxcclxuYT1leHRtYXA6MiBodHRwOi8vd3d3LndlYnJ0Yy5vcmcvZXhwZXJpbWVudHMvcnRwLWhkcmV4dC9hYnMtc2VuZC10aW1lXHJcbmE9ZXh0bWFwOjQgaHR0cDovL3d3dy5pZXRmLm9yZy9pZC9kcmFmdC1ob2xtZXItcm1jYXQtdHJhbnNwb3J0LXdpZGUtY2MtZXh0ZW5zaW9ucy0wMVxyXG5hPWV4dG1hcDo5IHVybjppZXRmOnBhcmFtczpydHAtaGRyZXh0OnNkZXM6bWlkXHJcbmE9ZXh0bWFwOjEwIHVybjppZXRmOnBhcmFtczpydHAtaGRyZXh0OnNkZXM6cnRwLXN0cmVhbS1pZFxyXG5hPWV4dG1hcDoxMSB1cm46aWV0ZjpwYXJhbXM6cnRwLWhkcmV4dDpzZGVzOnJlcGFpcmVkLXJ0cC1zdHJlYW0taWRcclxuYT1zZW5kcmVjdlxyXG5hPW1zaWQ6LSBmODQ0OTg2ZC02NDQ2LTQ3YTgtYTE0My0xNWY0NWU0ODY1YzlcclxuYT1ydGNwLW11eFxyXG5hPXJ0cG1hcDoxMTEgb3B1cy80ODAwMC8yXHJcbmE9cnRjcC1mYjoxMTEgdHJhbnNwb3J0LWNjXHJcbmE9Zm10cDoxMTEgbWlucHRpbWU9MTA7dXNlaW5iYW5kZmVjPTFcclxuYT1ydHBtYXA6MTAzIElTQUMvMTYwMDBcclxuYT1ydHBtYXA6OSBHNzIyLzgwMDBcclxuYT1ydHBtYXA6MCBQQ01VLzgwMDBcclxuYT1ydHBtYXA6OCBQQ01BLzgwMDBcclxuYT1ydHBtYXA6MTA1IENOLzE2MDAwXHJcbmE9cnRwbWFwOjEzIENOLzgwMDBcclxuYT1ydHBtYXA6MTEwIHRlbGVwaG9uZS1ldmVudC80ODAwMFxyXG5hPXJ0cG1hcDoxMTMgdGVsZXBob25lLWV2ZW50LzE2MDAwXHJcbmE9cnRwbWFwOjEyNiB0ZWxlcGhvbmUtZXZlbnQvODAwMFxyXG5hPXNzcmM6MjQ5ODk1NjI4OCBjbmFtZTpYRERiYzd3SGtraGJLbEVwXHJcbmE9c3NyYzoyNDk4OTU2Mjg4IG1zaWQ6LSBmODQ0OTg2ZC02NDQ2LTQ3YTgtYTE0My0xNWY0NWU0ODY1YzlcclxuYT1zc3JjOjI0OTg5NTYyODggbXNsYWJlbDotXHJcbmE9c3NyYzoyNDk4OTU2Mjg4IGxhYmVsOmY4NDQ5ODZkLTY0NDYtNDdhOC1hMTQzLTE1ZjQ1ZTQ4NjVjOVxyXG4ifQ==", &offer)

	// Set the remote SessionDescription
	if err = peerConnection.SetRemoteDescription(offer); err != nil {
		panic(err)
	}

	// Create answer
	answer, err := peerConnection.CreateAnswer(nil)
	if err != nil {
		panic(err)
	}

	// Create channel that is blocked until ICE Gathering is complete
	gatherComplete := webrtc.GatheringCompletePromise(peerConnection)

	// Sets the LocalDescription, and starts our UDP listeners
	if err = peerConnection.SetLocalDescription(answer); err != nil {
		panic(err)
	}

	// Block until ICE Gathering is complete, disabling trickle ICE
	// we do this because we only can exchange one signaling message
	// in a production application you should exchange ICE Candidates via OnICECandidate
	<-gatherComplete

	// Output the answer in base64 so we can paste it in browser
	fmt.Println(utils.Encode(*peerConnection.LocalDescription()))

	// Block forever
	select {}
}
